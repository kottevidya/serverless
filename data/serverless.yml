service: vdata
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.10
  stage: ${opt:stage, 'local'}
  region: ${opt:region, 'us-east-1'}
  timeout: 29
  # vpc:
  #   securityGroupIds:
  #     - Ref:
  #       Fn::GetAtt:
  #         - GWDATAVPC
  #         - DefaultSecurityGroup
  #   subnetIds:
  #     - Ref: GWDATAPrivateSubnet1
  #     - Ref: GWDATAPrivateSubnet2
plugins:
  - serverless-functions-base-path
  - serverless-python-requirements
  - serverless-offline
custom:
  prefix: ${self:service}-${opt:stage, self:provider.stage} # prefix for all resources
  functionsBasePath: handlers
  pythonRequirements:
    usePoetry: true
    zip: true
    useDownloadCache: false
    useStaticCache: false
  # parameters:
  #   ${file(sls-yml/parameters.yml)}
functions:
  hello:
    handler: handler.hello
    events:
      - httpApi:
          path: /vidyatest
          method: POST
    # environment:
    #     OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    #     OPENAI_API_BASE: ${env:OPENAI_API_BASE}
    #     OPENAI_API_TYPE: ${env:OPENAI_API_TYPE}
    #     OPENAI_API_VERSION: ${env:OPENAI_API_VERSION}
# you can add CloudFormation resource templates here
resources:
  # - ${file(sls-yml/iam/rdsdatabaserole.yml)}
  # - ${file(sls-yml/iam/LambdaRole.yml)}
  # - ${file(sls-yml/kms/kmsforRDS.yml)}
  # - ${file(sls-yml/s3/s3.yml)}
  # - ${file(sls-yml/vpc/vpc.yml)}
  # - ${file(sls-yml/secrets/rdssecrets.yml)}
  # - ${file(sls-yml/rds/postgreSQL.yml)}               
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2


